{
  "name": "AutoFormBasic",
  "type": "registry:example",
  "dependencies": [],
  "registryDependencies": [
    "auto-form",
    "button",
    "toast"
  ],
  "files": [
    {
      "path": "examples/AutoFormBasic.vue",
      "content": "<script setup lang=\"ts\">\nimport { h } from 'vue'\nimport * as z from 'zod'\nimport { AutoForm, AutoFormField } from '@/registry/default/ui/auto-form'\nimport { Button } from '@/registry/default/ui/button'\nimport { toast } from '@/registry/default/ui/toast'\n\nenum Sports {\n  Football = 'Football/Soccer',\n  Basketball = 'Basketball',\n  Baseball = 'Baseball',\n  Hockey = 'Hockey (Ice)',\n  None = 'I don\\'t like sports',\n}\n\nconst schema = z.object({\n  username: z\n    .string({\n      required_error: 'Username is required.',\n    })\n    .min(2, {\n      message: 'Username must be at least 2 characters.',\n    }),\n\n  password: z\n    .string({\n      required_error: 'Password is required.',\n    })\n    .min(8, {\n      message: 'Password must be at least 8 characters.',\n    }),\n\n  favouriteNumber: z.coerce\n    .number({\n      invalid_type_error: 'Favourite number must be a number.',\n    })\n    .min(1, {\n      message: 'Favourite number must be at least 1.',\n    })\n    .max(10, {\n      message: 'Favourite number must be at most 10.',\n    })\n    .default(1)\n    .optional(),\n\n  acceptTerms: z\n    .boolean()\n    .refine(value => value, {\n      message: 'You must accept the terms and conditions.',\n      path: ['acceptTerms'],\n    }),\n\n  sendMeMails: z.boolean().optional(),\n\n  birthday: z.coerce.date().optional(),\n\n  color: z.enum(['red', 'green', 'blue']).optional(),\n\n  // Another enum example\n  marshmallows: z\n    .enum(['not many', 'a few', 'a lot', 'too many']),\n\n  // Native enum example\n  sports: z.nativeEnum(Sports).describe('What is your favourite sport?'),\n\n  bio: z\n    .string()\n    .min(10, {\n      message: 'Bio must be at least 10 characters.',\n    })\n    .max(160, {\n      message: 'Bio must not be longer than 30 characters.',\n    })\n    .optional(),\n\n  customParent: z.string().optional(),\n\n  file: z.string().optional(),\n})\n\nfunction onSubmit(values: Record<string, any>) {\n  toast({\n    title: 'You submitted the following values:',\n    description: h('pre', { class: 'mt-2 w-[340px] rounded-md bg-slate-950 p-4' }, h('code', { class: 'text-white' }, JSON.stringify(values, null, 2))),\n  })\n}\n</script>\n\n<template>\n  <AutoForm\n    class=\"w-2/3 space-y-6\"\n    :schema=\"schema\"\n    :field-config=\"{\n      password: {\n        label: 'Your secure password',\n        inputProps: {\n          type: 'password',\n          placeholder: '••••••••',\n        },\n      },\n      favouriteNumber: {\n        description: 'Your favourite number between 1 and 10.',\n      },\n      acceptTerms: {\n        label: 'Accept terms and conditions.',\n        inputProps: {\n          required: true,\n        },\n      },\n\n      birthday: {\n        description: 'We need your birthday to send you a gift.',\n      },\n\n      sendMeMails: {\n        component: 'switch',\n      },\n\n      bio: {\n        component: 'textarea',\n      },\n\n      marshmallows: {\n        label: 'How many marshmallows fit in your mouth?',\n        component: 'radio',\n      },\n\n      file: {\n        label: 'Text file',\n        component: 'file',\n      },\n    }\"\n    @submit=\"onSubmit\"\n  >\n    <template #acceptTerms=\"slotProps\">\n      <AutoFormField v-bind=\"slotProps\" />\n      <div class=\"!mt-2 text-sm\">\n        I agree to the <button class=\"text-primary underline\">\n          terms and conditions\n        </button>.\n      </div>\n    </template>\n\n    <template #customParent=\"slotProps\">\n      <div class=\"flex items-end space-x-2\">\n        <AutoFormField v-bind=\"slotProps\" class=\"w-full\" />\n        <Button type=\"button\">\n          Check\n        </Button>\n      </div>\n    </template>\n\n    <Button type=\"submit\">\n      Submit\n    </Button>\n  </AutoForm>\n</template>\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
