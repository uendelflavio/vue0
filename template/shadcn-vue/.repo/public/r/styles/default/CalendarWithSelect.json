{
  "name": "CalendarWithSelect",
  "type": "registry:example",
  "dependencies": [
    "@vueuse/core",
    "reka-ui"
  ],
  "registryDependencies": [
    "calendar",
    "select"
  ],
  "files": [
    {
      "path": "examples/CalendarWithSelect.vue",
      "content": "<script setup lang=\"ts\">\nimport { type DateValue, getLocalTimeZone, today } from '@internationalized/date'\nimport { useVModel } from '@vueuse/core'\nimport { CalendarRoot, type CalendarRootEmits, type CalendarRootProps, useDateFormatter, useForwardPropsEmits } from 'reka-ui'\nimport { createDecade, createYear, toDate } from 'reka-ui/date'\nimport { computed, type HTMLAttributes, type Ref } from 'vue'\nimport { cn } from '@/lib/utils'\nimport { CalendarCell, CalendarCellTrigger, CalendarGrid, CalendarGridBody, CalendarGridHead, CalendarGridRow, CalendarHeadCell, CalendarHeader, CalendarHeading } from '@/registry/default/ui/calendar'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/registry/default/ui/select'\n\nconst props = withDefaults(defineProps<CalendarRootProps & { class?: HTMLAttributes['class'] }>(), {\n  modelValue: undefined,\n  placeholder() {\n    return today(getLocalTimeZone())\n  },\n  weekdayFormat: 'short',\n})\nconst emits = defineEmits<CalendarRootEmits>()\n\nconst delegatedProps = computed(() => {\n  const { class: _, placeholder: __, ...delegated } = props\n\n  return delegated\n})\n\nconst placeholder = useVModel(props, 'modelValue', emits, {\n  passive: true,\n  defaultValue: today(getLocalTimeZone()),\n}) as Ref<DateValue>\n\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\n\nconst formatter = useDateFormatter('en')\n</script>\n\n<template>\n  <CalendarRoot\n    v-slot=\"{ date, grid, weekDays }\"\n    v-model:placeholder=\"placeholder\"\n    v-bind=\"forwarded\"\n    :class=\"cn('rounded-md border p-3', props.class)\"\n  >\n    <CalendarHeader>\n      <CalendarHeading class=\"flex w-full items-center justify-between gap-2\">\n        <Select\n          :default-value=\"placeholder.month.toString()\"\n          @update:model-value=\"(v) => {\n            if (!v || !placeholder) return;\n            if (Number(v) === placeholder?.month) return;\n            placeholder = placeholder.set({\n              month: Number(v),\n            })\n          }\"\n        >\n          <SelectTrigger aria-label=\"Select month\" class=\"w-[60%]\">\n            <SelectValue placeholder=\"Select month\" />\n          </SelectTrigger>\n          <SelectContent class=\"max-h-[200px]\">\n            <SelectItem\n              v-for=\"month in createYear({ dateObj: date })\"\n              :key=\"month.toString()\" :value=\"month.month.toString()\"\n            >\n              {{ formatter.custom(toDate(month), { month: 'long' }) }}\n            </SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select\n          :default-value=\"placeholder.year.toString()\"\n          @update:model-value=\"(v) => {\n            if (!v || !placeholder) return;\n            if (Number(v) === placeholder?.year) return;\n            placeholder = placeholder.set({\n              year: Number(v),\n            })\n          }\"\n        >\n          <SelectTrigger aria-label=\"Select year\" class=\"w-[40%]\">\n            <SelectValue placeholder=\"Select year\" />\n          </SelectTrigger>\n          <SelectContent class=\"max-h-[200px]\">\n            <SelectItem\n              v-for=\"yearValue in createDecade({ dateObj: date, startIndex: -10, endIndex: 10 })\"\n              :key=\"yearValue.toString()\" :value=\"yearValue.year.toString()\"\n            >\n              {{ yearValue.year }}\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </CalendarHeading>\n    </CalendarHeader>\n\n    <div class=\"flex flex-col space-y-4 pt-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\">\n      <CalendarGrid v-for=\"month in grid\" :key=\"month.value.toString()\">\n        <CalendarGridHead>\n          <CalendarGridRow>\n            <CalendarHeadCell\n              v-for=\"day in weekDays\" :key=\"day\"\n            >\n              {{ day }}\n            </CalendarHeadCell>\n          </CalendarGridRow>\n        </CalendarGridHead>\n        <CalendarGridBody class=\"grid\">\n          <CalendarGridRow v-for=\"(weekDates, index) in month.rows\" :key=\"`weekDate-${index}`\" class=\"mt-2 w-full\">\n            <CalendarCell\n              v-for=\"weekDate in weekDates\"\n              :key=\"weekDate.toString()\"\n              :date=\"weekDate\"\n            >\n              <CalendarCellTrigger\n                :day=\"weekDate\"\n                :month=\"month.value\"\n              />\n            </CalendarCell>\n          </CalendarGridRow>\n        </CalendarGridBody>\n      </CalendarGrid>\n    </div>\n  </CalendarRoot>\n</template>\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
