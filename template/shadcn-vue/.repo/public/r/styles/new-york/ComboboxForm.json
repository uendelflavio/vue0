{
  "name": "ComboboxForm",
  "type": "registry:example",
  "dependencies": [
    "vee-validate",
    "@vee-validate/zod",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "combobox",
    "form",
    "toast"
  ],
  "files": [
    {
      "path": "examples/ComboboxForm.vue",
      "content": "<script setup lang=\"ts\">\nimport { toTypedSchema } from '@vee-validate/zod'\nimport { Check, ChevronsUpDown } from 'lucide-vue-next'\nimport { useForm } from 'vee-validate'\n\nimport { h } from 'vue'\n\nimport * as z from 'zod'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/registry/new-york/ui/button'\nimport { Combobox, ComboboxAnchor, ComboboxEmpty, ComboboxGroup, ComboboxInput, ComboboxItem, ComboboxItemIndicator, ComboboxList, ComboboxTrigger } from '@/registry/new-york/ui/combobox'\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/registry/new-york/ui/form'\nimport { toast } from '@/registry/new-york/ui/toast'\n\nconst languages = [\n  { label: 'English', value: 'en' },\n  { label: 'French', value: 'fr' },\n  { label: 'German', value: 'de' },\n  { label: 'Spanish', value: 'es' },\n  { label: 'Portuguese', value: 'pt' },\n  { label: 'Russian', value: 'ru' },\n  { label: 'Japanese', value: 'ja' },\n  { label: 'Korean', value: 'ko' },\n  { label: 'Chinese', value: 'zh' },\n] as const\n\nconst formSchema = toTypedSchema(z.object({\n  language: z.string({\n    required_error: 'Please select a language.',\n  }),\n}))\n\nconst { handleSubmit, setFieldValue } = useForm({\n  validationSchema: formSchema,\n  initialValues: {\n    language: '',\n  },\n})\n\nconst onSubmit = handleSubmit((values) => {\n  toast({\n    title: 'You submitted the following values:',\n    description: h('pre', { class: 'mt-2 w-[340px] rounded-md bg-slate-950 p-4' }, h('code', { class: 'text-white' }, JSON.stringify(values, null, 2))),\n  })\n})\n</script>\n\n<template>\n  <form class=\"space-y-6\" @submit=\"onSubmit\">\n    <FormField name=\"language\">\n      <FormItem class=\"flex flex-col\">\n        <FormLabel>Language</FormLabel>\n\n        <Combobox by=\"label\">\n          <FormControl>\n            <ComboboxAnchor>\n              <div class=\"relative w-full max-w-sm items-center\">\n                <ComboboxInput :display-value=\"(val) => val?.label ?? ''\" placeholder=\"Select language...\" />\n                <ComboboxTrigger class=\"absolute end-0 inset-y-0 flex items-center justify-center px-3\">\n                  <ChevronsUpDown class=\"size-4 text-muted-foreground\" />\n                </ComboboxTrigger>\n              </div>\n            </ComboboxAnchor>\n          </FormControl>\n\n          <ComboboxList>\n            <ComboboxEmpty>\n              Nothing found.\n            </ComboboxEmpty>\n\n            <ComboboxGroup>\n              <ComboboxItem\n                v-for=\"language in languages\"\n                :key=\"language.value\"\n                :value=\"language\"\n                @select=\"() => {\n                  setFieldValue('language', language.value)\n                }\"\n              >\n                {{ language.label }}\n\n                <ComboboxItemIndicator>\n                  <Check :class=\"cn('ml-auto h-4 w-4')\" />\n                </ComboboxItemIndicator>\n              </ComboboxItem>\n            </ComboboxGroup>\n          </ComboboxList>\n        </Combobox>\n\n        <FormDescription>\n          This is the language that will be used in the dashboard.\n        </FormDescription>\n        <FormMessage />\n      </FormItem>\n    </FormField>\n\n    <Button type=\"submit\">\n      Submit\n    </Button>\n  </form>\n</template>\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
