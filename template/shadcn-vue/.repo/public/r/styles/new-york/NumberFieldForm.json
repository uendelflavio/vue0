{
  "name": "NumberFieldForm",
  "type": "registry:example",
  "dependencies": [
    "vee-validate",
    "@vee-validate/zod",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "form",
    "number-field",
    "toast"
  ],
  "files": [
    {
      "path": "examples/NumberFieldForm.vue",
      "content": "<script setup lang=\"ts\">\nimport { toTypedSchema } from '@vee-validate/zod'\nimport { useForm } from 'vee-validate'\nimport { h } from 'vue'\nimport * as z from 'zod'\n\nimport { Button } from '@/registry/new-york/ui/button'\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/registry/new-york/ui/form'\nimport {\n  NumberField,\n  NumberFieldContent,\n  NumberFieldDecrement,\n  NumberFieldIncrement,\n  NumberFieldInput,\n} from '@/registry/new-york/ui/number-field'\nimport { toast } from '@/registry/new-york/ui/toast'\n\nconst formSchema = toTypedSchema(z.object({\n  payment: z.number().min(10, 'Min 10 euros to send payment').max(5000, 'Max 5000 euros to send payment'),\n}))\n\nconst { handleSubmit, setFieldValue } = useForm({\n  validationSchema: formSchema,\n  initialValues: {\n    payment: 10,\n  },\n})\n\nconst onSubmit = handleSubmit((values) => {\n  toast({\n    title: 'You submitted the following values:',\n    description: h('pre', { class: 'mt-2 w-[340px] rounded-md bg-slate-950 p-4' }, h('code', { class: 'text-white' }, JSON.stringify(values, null, 2))),\n  })\n})\n</script>\n\n<template>\n  <form class=\"w-2/3 space-y-6\" @submit=\"onSubmit\">\n    <FormField v-slot=\"{ value }\" name=\"payment\">\n      <FormItem>\n        <FormLabel>Payment</FormLabel>\n        <NumberField\n          class=\"gap-2\"\n          :min=\"0\"\n          :format-options=\"{\n            style: 'currency',\n            currency: 'EUR',\n            currencyDisplay: 'code',\n            currencySign: 'accounting',\n          }\"\n          :model-value=\"value\"\n          @update:model-value=\"(v) => {\n            if (v) {\n              setFieldValue('payment', v)\n            }\n            else {\n              setFieldValue('payment', undefined)\n            }\n          }\"\n        >\n          <NumberFieldContent>\n            <NumberFieldDecrement />\n            <FormControl>\n              <NumberFieldInput />\n            </FormControl>\n            <NumberFieldIncrement />\n          </NumberFieldContent>\n        </NumberField>\n        <FormDescription>\n          Enter value between 10 and 5000.\n        </FormDescription>\n        <FormMessage />\n      </FormItem>\n    </FormField>\n    <Button type=\"submit\">\n      Submit\n    </Button>\n  </form>\n</template>\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
